RecursiÃ³n
.........

Â¿QuÃ© es una RecursiÃ³n?
----------------------
 La recursiÃ³n serÃ­a definir algo en tÃ©rminos de sÃ­ mismo.

Vamos aplicar este concepto, aplicando la sucesiÃ³n de fibonacci:
 0, 1, 1, 2, 3, 5, 8, 13, 21, ...

- Sintaxis:
 fib(n) = fib(n-1) + fib(n-2)

ðŸ—’Nota: La sucesiÃ³n inicia con 0 y 1.

FunciÃ³n Recursiva
-----------------
En programaciÃ³n se le llama "FunciÃ³n Recursiva" cuando una funciÃ³n que se llama a sÃ­ misma. Los funciones recursivas tienen dos elementos principales en su estructura:
â€¢ Caso Base: permite que el proceso se detenga.
â€¢ Caso Recursivo: permite descomponer un problema a un versiÃ³n mÃ¡s pequeÃ±a.

- Ejemplo Visual:
 def fibonacci(n):
     if n == 0 or n == 1:
         return n # Caso Base
     else:
         return fibonacci(n-1) + fibonacci(n-2) # Caso Recursivo

 # n = posiciÃ³n en la sucesiÃ³n(iniciando en 0)
 #   0, 1, 1, 2, 3, 5, 8, 13, 21, ...
 # n 0  1  2  3  4  5  6  7   8

- LÃ³gica del fibonacci:
>>> def fibonacci(n):
        if n == 0 or n == 1:
                return n
        else:
                return fibonacci(n-1) + fibonacci(n-2)

>>> fibonacci(2)
1
>>> fibonacci(3)
2
