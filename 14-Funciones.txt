Funciones
.........

¬øQu√© es una Funci√≥n?
--------------------
 Una funci√≥n es un bloque de c√≥digo reutilizable que realiza una sola tarea espec√≠fica.

Esquema de como ser√≠a una funci√≥n:
 ______________
|  __________  |
| |  Tarea   | |
| |__________| |     
|  __________  |
| |  Tarea   | |
| |__________| |      
|  __________  |
| |  Tarea   | |
| |__________| |      
|  __________  |
| |  Tarea   | |
| |__________| |      
|  __________  |
| |  Tarea   | |
| |__________| |      
|  __________  |
| |  Tarea   | |
| |__________| |
|______________|

DRY(Don't Repeat Yourself)
--------------------------
 En programaci√≥n, existe un principio que debemos evitar repetir c√≥digo sino es necesario y minimizarlo.

Esquema de una funci√≥n siendo reutilizada:
------------------------------------------
              ___________
	     | _________ |
tarea------->|| tarea() ||
 ________ |  ||_________||
|Haz Esto||  | _________ |
|________||->|| tarea() ||
          |  ||_________||
          |  | _________ |
          |->|| tarea() ||
          |  ||_________||
          |  | _________ |
          |->|| tarea() ||
          |  ||_________||
          |  | _________ |
          |->|| tarea() ||
          |  ||_________||
          |  | _________ |
          |->|| tarea() ||
             ||_________||
             |___________|

Ventajas:
‚Ä¢ Reusable
‚Ä¢ Conciso
‚Ä¢ Le√≠ble
‚Ä¢ Mantenible
‚Ä¢ Comprobable

- Sintaxis:
 def <funci√≥n>():
     # C√≥digo

- Ejemplo:
 def mostrar_mensaje():
   print("¬°Hola, Mundo!")

Llamar a un Funci√≥n
-------------------
 Cuando llamamos a una funci√≥n, ejecutamos el c√≥digo del cuerpo de la funci√≥n.

- Sintaxis:
<nombre_de_la_funci√≥n>()

- Ejemplo:
>>> def mostrar_mensaje():
        print("¬°Hola, Mundo!")

>>> mostrar_mensaje()
¬°Hola, Mundo!
>>> mostrar_mensaje()
¬°Hola, Mundo!
>>> mostrar_mensaje()
¬°Hola, Mundo!

Esquema gr√°fico llamando entre el programa principal y la funci√≥n:
 _______________________________________
| ________				|
||Programa|	      ^	|		|
||________| __________|_V______________ |
|          | _______	 	       ||
|          ||Funci√≥n|                  ||
|          ||_______|                  ||
|          |                           ||
|          |                           ||
|          |                           ||
|          |___________________________||
|_______________________________________|

Dentro de lo que se componen las funciones entre parentesis, se llama "par√°metros" y valores que le pasamos se denoniman "argumentos".

 __________
|Par√°metros|
|__________|
 __________
|Argumentos|
|__________|

¬øQu√© es un Par√°metro?
---------------------
 Un par√°metro es una variable que se incluye en la definici√≥n de la funci√≥n para representar y guardar un valor que podemos pasar cuando llamamos a la funci√≥n.

 _________    __________
|Par√°metro|->|Definici√≥n|
|_________|  |  de la   |
             | Funci√≥n  |
             |__________|

- Sintaxis:
 def <funci√≥n>(<par√°metro>):
     # C√≥digo
     |
    El par√°metro puede ser usado en el cuerpo de la funci√≥n como cualquier otro variable.

- Ejemplo:
 def mostrar_doble(num):
     print(num * 2)

 Si necesitamos tomar varios par√°mentos, deben estar sepados por comas.
 ____________    ___________
|   Varios   |  | Separados |
| Par√°metros |->| por Comas |
|____________|  |___________|

- Ejemplo:
 def sumar(x, y):
     print(x + y)

 Si bien estos valores estan creados en el c√≥digo, no est√°n recibiendo ningun argumentos para ser usados.

¬øQu√© es un Argumento?
---------------------
 Un argumento es un valor que asignamos a un par√°metro cuando llamamos a una funci√≥n.
 __________    ____________
|Argumentos|->|  Llamada   |
|__________|  |a la funci√≥n|
              |____________|

 Los argumentos son asignados a sus correspondientes par√°metros.

Definici√≥n de la Funci√≥n:
  def sumar(x, y):
     print(x + y)

Llamada a la Funci√≥n:
  sumar(4, 5)

- Ejemplo:
>>> def sumar(x, y):
        print(x + y)

>>> sumar(4, 5)
9

Diferencia entre Par√°mentros y Argumentos
-----------------------------------------
 Los par√°metros se incluyen en la definici√≥n de la funci√≥n, mientras que los argumentos se incluyen en la llamada de la funci√≥n, y por ende, los argumentos sin asignados a los par√°metros.
 __________    __________
|Par√°metros|->|Definici√≥n|
|__________|  |__________|

 __________    _______
|Argumentos|->|Llamada|
|__________|  |_______|

Esquema gr√°fico de la funci√≥n retornando en el programado:
 _______________________________________
| ________				|
||Programa|	      ^			|
||________| __________|________________ |
|          | _______	 	       ||
|          ||Funci√≥n|                  ||
|          ||_______|                  ||
|          |                           ||
|          |                           ||
|          |                           ||
|          |___________________________||
|_______________________________________|

 El prop√≥sito de esta comunicaci√≥n es que la funci√≥n retorne un valor luego de completar la tarea.

- Sintaxis:
 def <funci√≥n>(<params>):
     # C√≥digo
     return <valor>

- Ejemplo:
>>> def sumar(x, y):
        return x + y

>>> resultado = sumar(4, 5)
>>> resultado
9

üóíNota: Cuando se ejecuta 'return', la ejecuci√≥n de la funci√≥n se detiene inmediatamente.

Si no hay 'return', por defecto ser√° el valor None.

- Ejemplo:
>>> def sumar(x, y):
        print(x + y)


>>> resultado = sumar(4, 5)
9
>>> print(resultado)
None

En el shell interactivo, el valor retornado por la llamada a una funci√≥n no se muestra si se asigna a una variable. Para ver el valor, se tiene que usar la funci√≥n print()

Alcance de una Variable(Scope)
------------------------------
 El Scope es el alcance que tendr√° la variable en el programa. D√≥nde se podr√° usar. Determina a qu√© variables se tiene acceso en cada parte del programa.

Tipos de Scope
--------------
 Existen dos tipos:
		  ______
	    |--->|Global|
	    |	 |______|
            |
 _________  |
|Variables|-|
|_________| |
            |
            |     _____
            |--->|Local|
		 |_____|

Scope Global
------------
 ‚Ä¢ Definici√≥n: Variables definidas fuera de funciones, accesibles en todo el programa.
 ‚Ä¢ Uso: Para datos que deben ser accesibles en cualquier parte del c√≥digo.

Scope Local
-----------
 ‚Ä¢ Definici√≥n: Variables definidas dentro de funciones, accesibles solo dentro de esas funciones.
 ‚Ä¢ Uso: Para datos temporales utilizados √∫nicamente dentro de una funci√≥n espec√≠fica.

Esquema:
 _______________________________________
| ________	  ____________		|
||Programa|	 |Scope Global|		|
||________|      |____________|         |
|	    ___________________________ |
|          | _______	 ___________   ||
|          ||Funci√≥n|   |Scope Local|  ||
|          ||_______|   |___________|  ||
|          |                           ||
|          |                           ||
|          |                           ||
|          |___________________________||
|_______________________________________|

- Ejemplo:

 x = 10  # Variable global
 
 def mi_funcion():
     y = 5  # Variable local
     print(x, y) 
 
 mi_funcion()
 print(x)
 # print(y)  # Error: 'y' es local
