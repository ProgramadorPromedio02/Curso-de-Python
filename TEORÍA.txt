INTRODUCCI√ìN
............

C√≥mo instalar Python
--------------------


¬øQu√© es un IDLE?
----------------
 Entorno integrado de programaci√≥n que se instala autom√°ticamente cuando instalas Python.

Con IDLE puedes:
‚Ä¢ Escribir |
‚Ä¢ Editar   | --> C√≥digo
‚Ä¢ Ejecutar |

 Para poder ejecutar ese IDLE, tenemos que ir a la siguiente ubicaci√≥n.
Ubicaci√≥n:
C:\Users\User\AppData\Local\Programs\Python\Python312\Lib\idlelib

VARIABLES
.........

¬øQu√© es una VARIABLE?
---------------------

 Una variable es un nombre que se le asigna a un valor en el programa(espacio en memoria). 
- Ejemplo:
	Asignaci√≥n
	    ^
	    |
	num = 5 -> Valor
        |
	      V
	Nombre de la variable

- Sintaxis:
      Asignaci√≥n
	  ^
	  |
	<var> = <val> -> Valor
         	 |
	         V
  	Nombre de la variable

Reglas para Nombrar Variables

‚Ä¢ Los nombres de variables deben empezar con una letra o con un gui√≥n bajo.

- Ejemplo: mi_variable / _mi_variable

‚Ä¢ Los nombres de variables no pueden comenzar con un n√∫mero, de lo contrario, ocurrira un error de sintaxis.

- Ejemplo: 9mi_variable = 5
SyntaxError: invalid syntax
^		          ^  
|		          |
Error de     Sintaxis inv√°lida
Sintaxis

‚Ä¢ Solo pueden contener caracteres alfanum√©ricos(A-Z, a-z, 0-9, _).

- Ejemplo: num_vistas = 12442

‚Ä¢ No pueden contener caracteres que no sean alfanum√©ricos.

- Ejemplo: @variable = 34
SyntaxError: invalid syntax

‚Ä¢ Se distingue entre may√∫sculas y min√∫sculas(CaseSensitive).

- Ejemplo: edad/Edad/EDAD


Tipos de Datos
..............

N√∫mericos
---------

‚Ä¢ Entero:
 N√∫meros que no tienen decimales.
* Positivos.
* Negativos.
* Cero.

- Ejemplos:

5  -3  0

3  -8

15 -1

27 -16

- Type(): para saber el tipo de dato de la variable.

<class 'int'>
int => Integer = Entero

- Ejemplos:

>>> type(5)
<class 'int'>
>>> type(-15)
<class 'int'>
>>> type(0)
<class 'int'>

üóíNota: En python no hay l√≠mites sino el sistema que permita en nuestro dispositivo.

‚Ä¢ N√∫meros en Coma Flotante:
 N√∫meros que tienen decimales.
 * Positivos.
 * Negativos.

- Type():

<class 'float'>
Float = Flotar

- Ejemplos:
>>> type(0.5)
<class 'float'>
>>> type(13.4)
<class 'float'>
>>> type(4.0)
<class 'float'>

‚Ä¢ Booleanos: se representan entre los valores de verdad(True y False).

- Importantantes para:
 * Expresiones Condicionales.
 * Ciclos(Bucles).

- Type():

<class 'bool'>
bool = Booleano

- Ejemplos:

>>> type(True)
<class 'bool'>
>>> type(False)
<class 'bool'>

Cadenas de Caracteres
---------------------

¬øQu√© es una Cadena de Caracteres(String)?
-----------------------------------------
 Una cadena de caracteres es una secuencia de caracteres encerrados entre comillas y usados para representar texto en el programa.

Ejemplo: "Python"/'Python'

- Type():

>>> type("Python")
<class 'str'>
str => String = Cadena(en referencia al texto)

‚Ä¢ No puedes mezclar las comillas dobles("") y las comillas simples('') en el c√≥digo. 

Ejemplos: 
>>> "Python'
SyntaxError: EOL while scanning string literal -> Cuando se estaba escaneando la cadena literal de caracteres.
             ^
	     	     |
	      End of Line = Final de la L√≠nea

>>> 'Python"
SyntaxError: EOL while scanning string literal

‚Ä¢ El valor de un entero no igual que una parte de cadena de caracteres. Ejemplo: 5 != "5"

- Type():

>>> type(5)
<class 'int'>
>>> type("5")
<class 'str'>

Tama√±o(Length)
--------------
 N√∫mero de caracteres que posee, empezando desde 0 en adelante.

‚Ä¢ len(): calcula la longitud de la cantidad de caracteres que existen en el string.

- Ejemplos:

 len("") -> 0
 len("A") -> 1
 len("Hola") -> 4
 len("Python") -> 6

Indexaci√≥n(Indexing)
--------------------
 Nos permite acceder a caracteres individuales de la cadena.

- Sintaxis:

<cadena>[<√≠ndice>]

- Ejemplo:

>>> palabra = "Python"
>>> palabra[0]
'P'
>>> palabra[1]
'y'
>>> palabra[2]
't'
>>> palabra[3]
'h'
>>> palabra[4]
'o'
>>> palabra[5]
'n'
>>> palabra[6]
Traceback (most recent call last):
  File "<pyshell#32>", line 1, in <module>
    palabra[6]
IndexError: string index out of range
		|	
		V
IndexError: √çndice de cadena de caracteres fuera de rango

Rebanado(Slicing)
-----------------
 Nos permite obtener una rebanada(porci√≥n) de una cadena de caracteres.

- Sintaxis:
		 √çndice que marca el fin de la rebanada.
		 ^
		 |
<cadena>[inicio:fin]
	 |
	 V
	√çndice que marca el inicio de la rebanada.

- Ejemplo:
 
>>> palabra = "Python"
>>> palabra[1:4]
'yth'

- Otras formas:
 
<cadena>[inicio:]
<cadena>[:fin]
<cadena>[:]

- Un tercer parametro:

<cadena>[inicio:fin:paso]
		    |
		    V
		   C√≥mo "saltar" de un caracter al siguiente.

- Ejemplo:

>>> palabra = "Python"
>>> palabra[1:6:2]
'yhn'

M√©todos
.......

¬øQu√© es son los M√©todos de Cadena de Caracteres?
------------------------------------------------
 Son operaciones comunes que vienen implementadas en Python.

- Sintaxis:

<cadena>.<m√©todo>(<valores>)

‚Ä¢ Capitalize: Retorna una copia de la cadena con el primer car√°cter en may√∫sculas y el resto min√∫sculas.

- Sintaxis:

<cadena>.capitalize()

- Ejemplo:

>>> palabra = "python"
>>> palabra.capitalize()
'Python'

M√©todos Importantes:
--------------------
‚Ä¢ find: Busca una subcadena dentro de una cadena y devuelve el √≠ndice de la primera aparici√≥n. Si no se encuentra, devuelve -1.
‚Ä¢ index: Similar a find, busca una subcadena y devuelve el √≠ndice de la primera aparici√≥n, pero lanza una excepci√≥n ValueError si no se encuentra.
‚Ä¢ isalnum: Devuelve True si todos los caracteres de la cadena son alfanum√©ricos (letras y n√∫meros) y hay al menos un car√°cter, de lo contrario devuelve False.
‚Ä¢ isalpha(): Devuelve True si todos los caracteres de la cadena son letras y hay al menos un car√°cter, de lo contrario devuelve False.
‚Ä¢ isdecimal(): Devuelve True si todos los caracteres de la cadena son caracteres decimales y hay al menos un car√°cter, de lo contrario devuelve False.
‚Ä¢ isdigit(): Devuelve True si todos los caracteres de la cadena son d√≠gitos y hay al menos un car√°cter, de lo contrario devuelve False.
‚Ä¢ islower(): Devuelve True si todos los caracteres de la cadena est√°n en min√∫sculas y hay al menos un car√°cter, de lo contrario devuelve False.
‚Ä¢ isupper(): Devuelve True si todos los caracteres de la cadena est√°n en may√∫sculas y hay al menos un car√°cter, de lo contrario devuelve False.
‚Ä¢ lower(): Convierte todos los caracteres de la cadena a min√∫sculas y devuelve una nueva cadena.
‚Ä¢ upper(): Convierte todos los caracteres de la cadena a may√∫sculas y devuelve una nueva cadena.

Recibiendo Datos del Usuario
----------------------------
‚Ä¢ input(): Permite recibir los datos del usuario, y mostrarlo un mensaje descriptivo en consola.

- Sintaxis:

<var> = input(<mensaje>)

- Ejemplo:

num = input("Ingrese un N√∫mero: ")
print(num)

Ejecuci√≥n:
Ingrese un N√∫mero: 5
5

Advertencia: La funci√≥n input() siempre retorna una cadena de caracteres.

- Ejemplo:
>>> num = input("Ingrese un N√∫mero: ")

Ejecuci√≥n:
Ingrese un N√∫mero: 5
5
>>> type(num)
<class 'str'>

Soluci√≥n:
>>> num = int(input("Ingrese un N√∫mero: "))

Ejecuci√≥n:
Ingrese un N√∫mero: 5
5
>>> type(num)
<class 'int'>

Operadores
..........

¬øQu√© es un Operador?
------------------
Un operador es un s√≠mbolo que denota una operaci√≥n en el programa. Los operadores son esos valores con los cuales se ejecuta la operaci√≥n.

- Sintaxis:
Operador + Operandos = Expresi√≥n

¬øQu√© es una Expresi√≥n?
----------------------
Una expresi√≥n es una combinaci√≥n de valores, variables, y operadores que al ser evaluados resultan en un valor.

Las expresiones se eval√∫an de izquierda a derecha => 
Excepto cuando ciertos operadores tienen mayor "importancia" para el orden de las operaciones.

Operadores:
-----------
‚Ä¢ Aritm√©ticos
‚Ä¢ L√≥gicos
‚Ä¢ De Asignaci√≥n
‚Ä¢ Relacionales

Operadores Aritm√©ticos
----------------------
 Nos permiten realizar operaciones aritm√©ticas en el programa.

Operadores Aritm√©ticos son permiten hacer:
‚Ä¢ Suma
‚Ä¢ Resta
‚Ä¢ Multiplicaci√≥n
‚Ä¢ Divisi√≥n
‚Ä¢ Divisi√≥n Entera
‚Ä¢ Exponente
‚Ä¢ M√≥dulo

Operador Suma(+)
----------------
>>> 5 + 6
11
>>> 2 + 3
5
>>> 6 + 8
14
>>> 3.4 + 5.6
9.0

Tambi√©n se puede usar para concatenar en cadena de caracteres.

>>> "Hola" + " " + "Mundo"
'Hola Mundo'

Operador Resta(-)
-----------------
>>> 10 - 4
6
>>> 4 - 8
-4
>>> 0 - 6
-6
>>> 3.4 - 5.6
-2.1999999999999997
>>> 2 - 8.9
-6.9

Operador Multiplicaci√≥n(*)
--------------------------
>>> 5 * 6
30
>>> 4 * 0
0
>>> -5 * -8
40
>>> -5 * 8
-40
>>> 4.5 * 7.9
35.550000000000004

Operador Divisi√≥n(/)
--------------------
>>> 15 / 5
3.0
>>> 15 / 8
1.875
>>> 12.5 / 4
3.125
>>> 4 / 4.5
0.88888888888888888
>>> 4.2 / 4.1
1.024390243902439

üóíNota: Siempre retorna un n√∫mero de coma flotante.

>>> 5 / 0
Traceback (most recent call last):
 File "<pyshell#123>", line 1, in <module>
   5 / 0
ZeraDivisionError: division by zero
|
V
Error de divisi√≥n por Cero

Operador Divisi√≥n Entero(//)
----------------------------
Trunca el resultado de la divisi√≥n:
>>> 15 // 5
3
>>> 3 // 5
0
>>> 157 // 56
2
>>> -4 // -6
0
>>> -15 // -10
1

El √∫nico caso donde no pueda retornar un n√∫mero de coma flotante, si dividimos dos n√∫meros de coma flotante:
>>> 5.6 // 3.4
1.0

Se usa en aplicaciones de algoritmos de b√∫squeda binaria.

Operador Exponente(**)
----------------------
>>> 5 ** 3
125
>>> 3 ** 8
6561
>>> 2 ** 3
8
>>> 4.5 ** 4.7
1175.1649090387732
>>> 16 ** (1/2)
4.0
>>> 5 ** 0
1

Regla matem√°tica: Todo n√∫mero elevado a 0 da como resultado 1.

Operador M√≥dulo(%)
------------------
Retorna el resto de la divisi√≥n. Es com√∫nmente utilizado para verificar si un n√∫mero es par o impar.

5|2
 |-
1|2

>>> 5 % 2
1
>>> 4 % 3
1
>>> 16 % 4
0
>>> 16 % 6
4
>>> 18 % 4
2

üóíNota: Para saber el orden en las operaciones, se toma un acr√≥nimo llamado PEMDAS(Par√©ntesis/Parenthesis Exponentes/Exponents Multiplicaci√≥n/Multiplication Divisi√≥n/Division Suma/Addition Resta/Subtraction)

Operadores L√≥gicos
------------------
 Nos permiten trabajar con valores booleanos(True y False). Estos son: and or not

Operador and
------------
 Eval√∫a si el operador izquierdo y el derecho son verdaderos. 

- Sintaxis: 
 x and y

TABLA DE VERDAD
 _______________________
|  X  |  Y  |  X and Y  |
|_____|_____|___________|
|True |True | True      |
|_____|_____|___________|
|True |False| False     |
|_____|_____|___________|
|False|True | False     |
|_____|_____|___________|
|False|False| False     |
|_____|_____|___________|

>>> (5 < 6) and (6 > 8)
False

Operador or
-----------
 Eval√∫a si cualquier operador de verdad son verdaderos.

- Sintaxis:
 x or y

TABLA DE VERDAD
 _______________________
|  X  |  Y  |  X and Y  |
|_____|_____|___________|
|True |True | True      |
|_____|_____|___________|
|True |False| True      |
|_____|_____|___________|
|False|True | True      |
|_____|_____|___________|
|False|False| False     |
|_____|_____|___________|

>>> (5 < 6) or (6 > 8)
True

Oparador not
------------
 Nega el valor de la expresi√≥n.

- Sintaxis:
 not x

TABLA DE VERDAD
 __________________
|   X    |  not X  |
|________|_________|
|True    |False    |
|________|_________|
|False   |True     |
|________|_________|

>>> not True
False
>>> not False
True

Prioridad:
‚Ä¢ not  | Mayor
‚Ä¢ and  |
‚Ä¢ or   |
       V Menor

Operadores de Asignaci√≥n
------------------------
 Son utilizados para asignar valores a las variables del programa. Estos son:
‚Ä¢ Asignaci√≥n de la Variable(=)
‚Ä¢ Asignaci√≥n de Suma(+=)
‚Ä¢ Asignaci√≥n de Resta(-=)
‚Ä¢ Asignaci√≥n de Multiplicaci√≥n(*=)
‚Ä¢ Asignaci√≥n de Divisi√≥n(/=)
‚Ä¢ Asignaci√≥n de Exponente(**=)
‚Ä¢ Asignaci√≥n de Divisi√≥n Entera(//=)
‚Ä¢ Asignaci√≥n de M√≥dulo(%=)

>>> edad = 56
>>> edad += 3
>>> edad
59
>>> edad -= 2
>>> edad
57
>>> edad *= 3
>>> edad
171
>>> edad /= 2
>>> edad
85.5

Operadores Relacionales
-----------------------
 Son utilizados para comparar valores y retornar un valor booleano. Estos son: 
‚Ä¢ Mayor que(>)
‚Ä¢ Menor que(<)
‚Ä¢ Igual(==)
‚Ä¢ Mayor igual que(>=)
‚Ä¢ Menos igual que(<=)
‚Ä¢ No igual a(!=)

>>> 5 > 6
False
>>> 10 > 3
True

>>> 5 > 5
False
>>> 5 >= 5
True

>>> 5 < 6
True
>>> 10 < 3
False

>>> 3 < 3
False
>>> 3 <= 3
True

>>> 8 == 8
True
>>> 8 != 8
False

>>> "Hola" == "Hola"
True
>>> "Hola" == "H"
False

>>> "ABC" < "A"
False
>>> "A" < "B"
True
>>> "B" > "A"
True
>>> "C" != "D"
True
>>> "Noris" == "Gino"
False

üóíNota: Se toma en orden alfabetico.

Sentencias Condicionales
........................

¬øQu√© es una Sentencia Condicional?
----------------------------------
 Una sentencia condicional es una instrucci√≥n o un grupo de instracciones cuya ejecuci√≥n depende del valor de una condici√≥n booleana.

					|
					V
	      Verdadera		    _________               Falsa
	      ---------------------|Condici√≥n|--------------------
	      |			   |_________|		         |	
         _____________			 			 |
        |Instrucciones|						 |
	|_____________| 					 |
	      |							 |
	      |__________________________________________________|
					|
					V


- Sintaxis:
 if <condici√≥n>:
  # C√≥digo

- Ejemplo:
>>> temp = 15
>>> if temp < 25:
        print("Fr√≠o")
Fr√≠o
>>> temp = 36
>>> if temp < 25:
	print("Fr√≠o")
...

Cl√°usula 'else'
---------------

					|
					V
	      Verdadera		    _________               Falsa
	      ---------------------|Condici√≥n|--------------------
	      |			   |_________|		         |	
         _____________			 	          _______________
        |Instrucciones|					 |Cl√°usula 'else'|
	|_____________| 				 |_______________|
	      |							 |
	      |__________________________________________________|
					|
					V


- Sintaxis:
 if <condici√≥n>:
     # C√≥digo
 else:
     # C√≥digo

- Ejemplo:
1 temp = 15
2
3 if temp < 25:
4 	print("Fr√≠o")
5 else:
6 	print("Calor")
Fr√≠o

1 temp = 35
2
3 if temp < 25:
4 	print("Fr√≠o")
5 else:
6 	print("Calor")
Calor

Cl√°usula 'elif'
---------------

- Sintaxis:
 if <condici√≥n1>:
 	# C√≥digo
 elif <condici√≥n2>:
	# C√≥digo
 else:
	# C√≥digo

- Ejemplo:
1 temp = 0
2
3 if temp <= 0:
4 	print("Muy Fr√≠o")
5 elif temp < 25:
6	print("Fr√≠o")
7 else:
8	print("Calor")
9
Muy Fr√≠o

1 temp = 15
2
3 if temp <= 0:
4 	print("Muy Fr√≠o")
5 elif temp < 25:
6	print("Fr√≠o")
7 else:
8	print("Calor")
9
Fr√≠o

1 temp = 35
2
3 if temp <= 0:
4 	print("Muy Fr√≠o")
5 elif temp < 25:
6	print("Fr√≠o")
7 else:
8	print("Calor")
9
Calor

üóíNota: Puede haber m√°s de una cl√°usula 'elif', pero solo una cl√°usula 'else'.

- Sintaxis:
 if <condici√≥n1>:
	# C√≥digo
 elif <condici√≥n2>:
	# C√≥digo
 elif <condici√≥n3>:
	# C√≥digo
 elif <condici√≥n4>:
	# C√≥digo
 else:
	# C√≥digo

Comentarios
...........

¬øQu√© es un Comentario?
----------------------
 Un comentario es un texto que se escribe en el programa para facilitar su comprensi√≥n. No son parte del c√≥digo.

Prop√≥sito:
 Describir la l√≥gica de ciertas partes del c√≥digo a otros programadores que lean el programa. Este es un comentario en Python: # Comentario

- Ejemplo:
# N√∫mero de estudiantes
# registrados en el sal√≥n 56
num_estudiantes = 33

üóíNota: No comentar en exceso.

- Ejemplo:
# Temperatura inicial 56
temp = 56

# Si la temperatura es mayor
# a 60, mostrar mensaje "Caliente"
if temp > 60:
	print("Caliente")
# Si la temperatura es mayor
# a 35, mostrar mensaje "Normal"
elif temp > 35:
	print("Normal")
# Si la temperatura es menor o igual
# a 35, mostrar mensaje "Fr√≠o"
else:
	print("Fr√≠o")

Listas
......

¬øQu√© es una Lista?
------------------
 Una lista una estructura de datos utilizada para almacenar m√∫ltiples valores en secuencia.

- Ejemplo:
[1, 2, 3, 4]

- Secuencia ordenada:
["a", "b", "c"]
 [0]  [1]  [2] -> 1+
    Indices

- Caracter√≠sticas:
‚Ä¢ Secuencia ordenada de valores.
‚Ä¢ Puede contener valores de cualquier tipo.
‚Ä¢ Puede contener valores de distintos ti√≥
‚Ä¢ Cada posici√≥n en la lista est√° asociada a un entero llamado "√≠ndice".
‚Ä¢ Es mutable. Puede ser modificada.

Acceder a un Elemento
---------------------
 Para acceder a un elemento de la lista, usamos su √≠ndice correspondiente.

- Sintaxis:
<lista>[<√≠ndice>]

- Ejemplo:
["a", "b", "c", "d"]
 [0]  [1]  [2]  [3]

>>> letras = ["a", "b", "c", "d"]
>>> letras[0]
'a'
>>> letras[1]
'b'
>>> letras[2]
'c'
>>> letras[3]
'd'

Agregar un Elemento
-------------------
Existen dos opciones:
 1. Al final de la lista.
 2. En un √≠ndice espec√≠fico.

1.

- Sintaxis:
 <lista>.append(<elem>)

‚Ä¢ append(): a√±ade un elemento al final de la lista.

- Ejemplo:
>>> nums = [1, 2, 3, 4]
>>> nums.append(5)
>>> nums
[1, 2, 3, 4, 5]

2. 

- Sintaxis:
 <lista>.insert(<√≠ndice>, <elem>)

‚Ä¢ insert(): inserta un elemento √∫nico en una lista existente en una posici√≥n espec√≠fica.

- Ejemplo:
>>> nums = [1, 2, 3, 4, 5]
>>> nums.insert(0, 6)
>>> nums
[6, 1, 2, 3, 4, 5]

Remover un Elemento
-------------------

- Sintaxis:
 <lista>.remove(<elem>)

‚Ä¢ remove(): elimina un elemento de una lista.

- Ejemplo:
>>> a = [1, 2, 3, 4, 5, 4]
>>> a.remove(4)
>>> a
[1, 2, 3, 5, 4]

>>> a = [1, 2, 3, 4, 5, 4]
>>> a.remove(9)
Traceback (most recent call last):
 File "<pyshell#18>", line 1, in <module>
   a.remove(9)
ValueError: list.remove(x) : x not in list
	|
Error de Valor: list.remove(x): x no est√° in la lista

Encontrar un Elemento
---------------------

- Sintaxis:
 <elem> in <lista>

- Ejemplo:
>>> vocales = ['a', 'e', 'i', 'o', 'u']
>>> 'a' in vocales
True
>>> 'z' in vocales
False

.index()
--------

- Sintaxis:
 <lista>.index(<elem>)

‚Ä¢ index(): retorna el √≠ndice de la primera ocurrencia del elemento en la lista. Si no se encuentra el elemento, ocurre un error.

- Ejemplo:
>>> vocales = ['a', 'e', 'i', 'o', 'u']
>>> vocales.index('i')
2

>>> vocales = ['a', 'e', 'i', 'o', 'u']
>>> vocales.index('z')
Traceback (most recent call last):
  File "<pyshell#3>", line 1, in <module>
    vocales.index('z')
ValueError: 'z' is not in list

Cambiar un Elemento
-------------------

Mutable
-------
 Pueden ser cambiadas. Sus elementos pueden ser modificados.

- Sintaxis:
 <lista>[<√≠ndice>] = <nuevo_valor>

- Ejemplo:
>>> nums = [1, 2, 3, 4, 5]
>>> nums[0] = -8
>>> nums
[-8, 1, 2, 3, 4, 5]

M√©todos de las Listas
---------------------
 Los m√©todos de las listas son operaciones comunes de listas que ya est√°n implementadas en Python.

- Sintaxis:
 <lista>.<m√©todo>(<par√°metros>)

M√©todos Importantes:
‚Ä¢ .count(): Devuelve el n√∫mero de veces que un elemento aparece en una lista.
‚Ä¢ .extend(): Agrega todos los elementos de una lista al final de otra lista.
‚Ä¢ .pop(): Elimina y devuelve el elemento en la posici√≥n especificada (por defecto, el √∫ltimo elemento).
‚Ä¢ .reverse(): Invierte el orden de los elementos en la lista.
‚Ä¢ .sort(): Ordena los elementos de la lista en orden ascendente (modificable con par√°metros).

- Ejemplos:
>>> lista = [1, 2, 2, 3, 4, 2]
>>> lista.count(2)  # Devuelve 3

>>> lista1 = [1, 2, 3]
>>> lista2 = [4, 5]
>>> lista1.extend(lista2)  # lista1 ahora es [1, 2, 3, 4, 5]

>>> lista = [1, 2, 3, 4]
>>> lista.pop()  # Devuelve 4 y lista ahora es [1, 2, 3]
>>> lista.pop(1)  # Devuelve 2 y lista ahora es [1, 3]

>>> lista = [1, 2, 3, 4]
>>> lista.reverse()  # lista ahora es [4, 3, 2, 1]

>>> lista = [4, 2, 3, 1]
>>> lista.sort()  # lista ahora es [1, 2, 3, 4]
>>> lista.sort(reverse=True)  # lista ahora es [4, 3, 2, 1]

Tuplas
......

¬øQu√© es una Tupla?
------------------
 Una tupla es una estructura de datos inmutable que contiene una secuencia ordenada de elementos.

- Ejemplo:
 (1, 2, 3, 4)

- Secuencia ordenada:
 ("a", "b", "c")
  [0]  [1]  [2]
     Indices

- Caracter√≠sticas:
 ‚Ä¢ Secuencia ordenada de valores.
 ‚Ä¢ Puede contener valores de cualquier tipo de datos.
 ‚Ä¢ Puede contener valores de distintos tipos de datos.
 ‚Ä¢ Cada posici√≥n de la tupla se identifica con un entero denominado "√≠ndice".
 ‚Ä¢ Es inmutable. No puede ser modificada.

üóíNota: Inmutable = No Puede Cambiar

>>> a = (1, 2, 3, 4)
>>> a[0] = 5
Traceback (most recent call last):
  File "<pyshell#15>", line 1, in <module>
    a[0] = 5
TypeError: 'tuple' object does not support item assigment

Acceder a un Elemento
---------------------
 Si bien no se pueden cambiar, s√≠ acceder y ver sus valores con su ind√≠ce.

- Ejemplo:
>>> letras = ("A", "B", "C")
>>> letras[0]
'A'
>>> letras[1]
'B'
>>> letras[2]
'C'

Encontrar un Elemento
---------------------
 Tambi√©n se puede encontrar un elemento en la tupla, haciendo lo mismo como en las listas.

- Sintaxis:
 <elem> in <tupla>

- Ejemplo:
>>> letras = ("a", "b", "c", "d")
>>> "a" in letras
True
>>> "b" in letras
True
>>> "z" in letras
False
>>> "x" in letras
False

.index()
--------
 Tambi√©n podemos hacer lo mismo, usando el m√©todo index().

- Sintaxis:
 <tupla>.index(<elem>)

- Ejemplo:
>>> letras = ("a", "b", "c", "d")
>>> letras.index("a")
0
>>> letras.index("b")
1
>>> letras.index("z")
Traceback (most recent call last):
  File "<pyshell#31>", line 1, in <module>
    letras.index("z")
ValueError: tuple.index(x): x is not in tuple

.count()
--------

- Sintaxis:
 <tupla>.count(<elem>)

- Ejemplo:
>>> nums = (3, 5, 2, 8, 4, 6, 3, 2)
>>> nums.count(3)
2

Diccionarios
............

¬øQu√© es un Diccionario?
-----------------------
 Un diccionario es una colecci√≥n de pares clave-valor.

- Ejemplo:
Par Clave-Valor
  |
 -------
{"A": 45, "B": 30}
  |   |	   ------
Clave Valor  |
            Par Clave-Valor

Clave -> Valor
"A"      45

Caracter√≠sticas:
‚Ä¢ Colecci√≥n de Pares Clave-Valor
‚Ä¢ Las claves deben ser √∫nicas e inmutables.
‚Ä¢ Los valores asociados pueden ser de cualquier tipo.
‚Ä¢ La clave se usa para acceder a su valor asociado.
‚Ä¢ Los pares clave-valor pueden ser modificados, a√±adidos, y eliminados.

Acceder a un Valor
------------------

- Sintaxis:
 <diccionario>[<clave>] -> Valor

- Ejemplo:
>>> edades = {"Gino": 15, "Nora": 45}
>>> edades["Gino"]
15
>>> edades["Nora"]
45

- Alternativa(get()):
>>> edades = {"Gino": 15, "Nora": 45}
>>> edades.get("Gino")
15

A√±adir y Modificar
------------------

A√±adir
------
- Sintaxis:
 <diccionario>[<nueva_clave>] = <nuevo_valor>

- Ejemplo:

>>> edades = {"Gino": 15, "Nora": 45}
>>> edades["Talina"] = 67
>>> edades
{'Gino': 15, 'Nora': 45, 'Talina': 67}

Modificar
---------
 Si la clave ya existe, se modifica su valor.

- Sintaxis:
 <diccionario>[<clave>] = <nuevo_valor>

- Ejemplo:
>>> edades = {"Gino": 15, "Nora": 45}
>>> edades["Gino"] = 17
>>> edades
{'Gino': 17, 'Nora': 45}

Remover
-------

- Sintaxis:
 del <diccionario>[<clave>]

- Ejemplo:
>>> edades = {"Gino": 15, "Nora": 45}
>>> del edades["Gino"]
>>> edades
{'Nora': 45}

Revisar Existencia
------------------

- Sintaxis:
 <elem> in <diccionario>

- Ejemplo:
>>> edades = {"Gino": 15, "Nora": 45}
>>> "Gino" in edades
True
>>> "Emily" in edades
False
>>> "Nora" in edades
True

Documentaci√≥n
.............

Documentaci√≥n Principal
-----------------------
https://docs.python.org/es/3.12/

Tutorial
--------
https://docs.python.org/es/3.12/tutorial/index.html

Biblioteca Est√°ndar de Python
-----------------------------
https://docs.python.org/es/3.12/library/index.html

Referencia del Lenguaje Python
------------------------------
https://docs.python.org/es/3.12/reference/index.html

Ciclos For
..........

¬øCu√°l es el prop√≥sito de un Ciclo?
----------------------------------
 El pros√≥sito de un ciclo llega a ser una estructura de control en programaci√≥n que permite ejecutar una o varias l√≠neas de c√≥digo m√∫ltiples veces.

¬øCu√°ndo usamos un Ciclo For?
----------------------------
 Los usamos cuando sabemos con antelaci√≥n *cu√°ntas veces* debemos repetir ciertas instrucciones.

- L√≥gica B√°sica:
	 ______
	|Inicio|
	|______|
	   |
	   V
	_________
 Falso |Evaluar  |
-------|Condici√≥n|<---------
|      |_________|         |
|          | Verdadero     |
|	   V               |
|     _____________        |
|    |Instrucciones|_______|
|    |_____________|
|     ________________
|--->|Ciclo se Detiene|
     |________________|
           |
           V
         _____
	| Fin |
	|_____|

¬øQu√© es una Iteraci√≥n?
----------------------
 Una iteraci√≥n es la repetici√≥n de un conjunto de instrucciones en un programa dentro un ciclo.

- Sintaxis del ciclo for:
 for <var> in range(<inicio>, <fin>):
	# C√≥digo

Variable de Control:
‚Ä¢ Variable que puede ser utilizada en el c√≥digo que se va a repetir.
‚Ä¢ Se actualiza autom√°ticamente antes de cada iteraci√≥n.
‚Ä¢ Debe tener un nombre descriptivo.

Range
-----

- Ejemplo:
 for i in range(4):
	print(i)

>>> for i in range(4):
	print(i)
0
1
2
3

‚Ä¢ range(): Retorna una secuencia de n√∫meros enteros.

- Analizando la l√≥gica de range():
range(4)-> 0, 1, 2, 3
      |
     fin
0, 1, 2, 3
|	 |
Default fin -1


Variable
de Control Ilustraci√≥n de range(4)
    |        |
for i in 0, 1, 2, 3:
	print(i) <- El valor se actualiza en cada iteraci√≥n

‚Ä¢ 1era Iteraci√≥n: i = 0
‚Ä¢ 2da Iteraci√≥n: i = 1
‚Ä¢ 3era Iteraci√≥n: i = 2
‚Ä¢ 4ta Iteraci√≥n: i = 3

- Sintaxis de range() con tres paramentros desde Python Docs:
 range(start, stop[, step])

‚Ä¢ start: El valor del par√°metro start(0 si no se utliza el par√°metro).
‚Ä¢ stop: El valor del par√°metro stop.
‚Ä¢ step: El valor del par√°metro step(1 si no se utiliza el par√°metro).

Ciclos sobre Iterables
----------------------

¬øQu√© es un Iterable?
--------------------
 Un iterable es un elemento que retorna sus elementos uno a la vez.

Para iterar sobre:
‚Ä¢ Cadenas de Caracteres.
‚Ä¢ Listas.
‚Ä¢ Tuplas.
‚Ä¢ Diccionarios.
‚Ä¢ Otros...

- Esquema:	 __________
 ________      _|	   |_
|Elemento| -> | Variable de  |		
|________|    |_  Control   _|
	        |__________|

- Sintaxis:
 for <var> in <iterable>:
	# C√≥digo

- Ejemplo Visual:
 for char in "Loops":
  ______________
 |Iteration|Char|
 |_________|____|
 |    1    |'L' |
 |_________|____|
 |    2    |'o' |
 |_________|____|
 |    3    |'o' |
 |_________|____|
 |    4    |'p' |
 |_________|____|
 |    5    |'s' |
 |_________|____|

- Ejemplo en C√≥digo:
>>> for char in "Loops":
	print(char)
L
o
o
p
s

- Ejemplo en Listas:
>>> for num in [1, 2, 3]:
	print(num)
1
2
3

- Ejemplo en Tuplas:
>>> for num in (1, 2, 3):
	print(num)
1
2
3

- Ejemplo en Diccionarios:
>>> letras = {"a": 1, "b": 2}
>>> for clave in letras:
	print(clave)

Iterar sobre:
‚Ä¢ Claves
‚Ä¢ Valores
‚Ä¢ Pares Clave-Valor

- Ejemplo en PyShell:
>>> letras = {"a": 1, "b": 2}
>>> for clave in letras: 
...	print(clave)
...
a
b
>>> for valor in letras.values():
...	print(valor)
...
... 
1
2
>>> for clave, valor in letras.items():
...	print(clave, valor)
...
... 
a 1
b 2

Ciclo While
...........
 El ciclo while es un tipo de ciclo que contin√∫a mientras una condici√≥n es verdadera y se detiene cuando es falsa.

üóíNota: Si el ciclo no deja de ser nunca verdadera, puede ocurrir un ciclo Infinito(Infinite Loop), del cual hay que tener mucho cuidado para sobre cargar a la maquina.

- Sintaxis:
 while <condici√≥n>:
     # C√≥digo
|
Indentaci√≥n(nivel de espaciado)

Iteraciones
-----------
 En n√∫mero de iteraciones un ciclo while no tiene un n√∫mero fijo o predeterminado de iteraciones cuando empiece a ejecutarse. Se ejecuta hasta que la condici√≥n es falsa.

L√≥gica B√°sica:

	 ______
	|Inicio|
	|______|
	   |
	   V
	_________
 Falso |Evaluar  |
-------|Condici√≥n|<---------
|      |_________|         |
|          | Verdadero     |
|	   V               |
|     _____________        |
|    |Instrucciones|_______|
|    |_____________|
|     ________________
|--->|Ciclo se Detiene|
     |________________|
           |
           V
         _____
	| Fin |
	|_____|

Variable de Control
-------------------
 Los ciclos while no actualizan la(s) variable(s) de control autom√°ticamente. Deben ser actualizadas en el cuerpo del ciclo.

Ejemplo:
1 x = 20
2
3 while x < 35:# 35 < 35 False
4     print(x) # 32
5     x += 3   # 35
6

Funciones
.........

¬øQu√© es una Funci√≥n?
--------------------
 Una funci√≥n es un bloque de c√≥digo reutilizable que realiza una sola tarea espec√≠fica.

Esquema de como ser√≠a una funci√≥n:
 ______________
|  __________  |
| |  Tarea   | |
| |__________| |     
|  __________  |
| |  Tarea   | |
| |__________| |      
|  __________  |
| |  Tarea   | |
| |__________| |      
|  __________  |
| |  Tarea   | |
| |__________| |      
|  __________  |
| |  Tarea   | |
| |__________| |      
|  __________  |
| |  Tarea   | |
| |__________| |
|______________|

DRY(Don't Repeat Yourself)
--------------------------
 En programaci√≥n, existe un principio que debemos evitar repetir c√≥digo sino es necesario y minimizarlo.

Esquema de una funci√≥n siendo reutilizada:
------------------------------------------
              ___________
	     | _________ |
tarea------->|| tarea() ||
 ________ |  ||_________||
|Haz Esto||  | _________ |
|________||->|| tarea() ||
          |  ||_________||
          |  | _________ |
          |->|| tarea() ||
          |  ||_________||
          |  | _________ |
          |->|| tarea() ||
          |  ||_________||
          |  | _________ |
          |->|| tarea() ||
          |  ||_________||
          |  | _________ |
          |->|| tarea() ||
             ||_________||
             |___________|

Ventajas:
‚Ä¢ Reusable
‚Ä¢ Conciso
‚Ä¢ Le√≠ble
‚Ä¢ Mantenible
‚Ä¢ Comprobable

- Sintaxis:
 def <funci√≥n>():
     # C√≥digo

- Ejemplo:
 def mostrar_mensaje():
   print("¬°Hola, Mundo!")

Llamar a un Funci√≥n
-------------------
 Cuando llamamos a una funci√≥n, ejecutamos el c√≥digo del cuerpo de la funci√≥n.

- Sintaxis:
<nombre_de_la_funci√≥n>()

- Ejemplo:
>>> def mostrar_mensaje():
        print("¬°Hola, Mundo!")

>>> mostrar_mensaje()
¬°Hola, Mundo!
>>> mostrar_mensaje()
¬°Hola, Mundo!
>>> mostrar_mensaje()
¬°Hola, Mundo!

Esquema gr√°fico llamando entre el programa principal y la funci√≥n:
 _______________________________________
| ________				|
||Programa|	      ^	|		|
||________| __________|_V______________ |
|          | _______	 	       ||
|          ||Funci√≥n|                  ||
|          ||_______|                  ||
|          |                           ||
|          |                           ||
|          |                           ||
|          |___________________________||
|_______________________________________|

Dentro de lo que se componen las funciones entre parentesis, se llama "par√°metros" y valores que le pasamos se denoniman "argumentos".

 __________
|Par√°metros|
|__________|
 __________
|Argumentos|
|__________|

¬øQu√© es un Par√°metro?
---------------------
 Un par√°metro es una variable que se incluye en la definici√≥n de la funci√≥n para representar y guardar un valor que podemos pasar cuando llamamos a la funci√≥n.

 _________    __________
|Par√°metro|->|Definici√≥n|
|_________|  |  de la   |
             | Funci√≥n  |
             |__________|

- Sintaxis:
 def <funci√≥n>(<par√°metro>):
     # C√≥digo
     |
    El par√°metro puede ser usado en el cuerpo de la funci√≥n como cualquier otro variable.

- Ejemplo:
 def mostrar_doble(num):
     print(num * 2)

 Si necesitamos tomar varios par√°mentos, deben estar sepados por comas.
 ____________    ___________
|   Varios   |  | Separados |
| Par√°metros |->| por Comas |
|____________|  |___________|

- Ejemplo:
 def sumar(x, y):
     print(x + y)

 Si bien estos valores estan creados en el c√≥digo, no est√°n recibiendo ningun argumentos para ser usados.

¬øQu√© es un Argumento?
---------------------
 Un argumento es un valor que asignamos a un par√°metro cuando llamamos a una funci√≥n.
 __________    ____________
|Argumentos|->|  Llamada   |
|__________|  |a la funci√≥n|
              |____________|

 Los argumentos son asignados a sus correspondientes par√°metros.

Definici√≥n de la Funci√≥n:
  def sumar(x, y):
     print(x + y)

Llamada a la Funci√≥n:
  sumar(4, 5)

- Ejemplo:
>>> def sumar(x, y):
        print(x + y)

>>> sumar(4, 5)
9

Diferencia entre Par√°mentros y Argumentos
-----------------------------------------
 Los par√°metros se incluyen en la definici√≥n de la funci√≥n, mientras que los argumentos se incluyen en la llamada de la funci√≥n, y por ende, los argumentos sin asignados a los par√°metros.
 __________    __________
|Par√°metros|->|Definici√≥n|
|__________|  |__________|

 __________    _______
|Argumentos|->|Llamada|
|__________|  |_______|

Esquema gr√°fico de la funci√≥n retornando en el programado:
 _______________________________________
| ________				|
||Programa|	      ^			|
||________| __________|________________ |
|          | _______	 	       ||
|          ||Funci√≥n|                  ||
|          ||_______|                  ||
|          |                           ||
|          |                           ||
|          |                           ||
|          |___________________________||
|_______________________________________|

 El prop√≥sito de esta comunicaci√≥n es que la funci√≥n retorne un valor luego de completar la tarea.

- Sintaxis:
 def <funci√≥n>(<params>):
     # C√≥digo
     return <valor>

- Ejemplo:
>>> def sumar(x, y):
        return x + y

>>> resultado = sumar(4, 5)
>>> resultado
9

üóíNota: Cuando se ejecuta 'return', la ejecuci√≥n de la funci√≥n se detiene inmediatamente.

Si no hay 'return', por defecto ser√° el valor None.

- Ejemplo:
>>> def sumar(x, y):
        print(x + y)


>>> resultado = sumar(4, 5)
9
>>> print(resultado)
None

En el shell interactivo, el valor retornado por la llamada a una funci√≥n no se muestra si se asigna a una variable. Para ver el valor, se tiene que usar la funci√≥n print()

Alcance de una Variable(Scope)
------------------------------
 El Scope es el alcance que tendr√° la variable en el programa. D√≥nde se podr√° usar. Determina a qu√© variables se tiene acceso en cada parte del programa.

Tipos de Scope
--------------
 Existen dos tipos:
		  ______
	    |--->|Global|
	    |	 |______|
            |
 _________  |
|Variables|-|
|_________| |
            |
            |     _____
            |--->|Local|
		 |_____|

Scope Global
------------
 ‚Ä¢ Definici√≥n: Variables definidas fuera de funciones, accesibles en todo el programa.
 ‚Ä¢ Uso: Para datos que deben ser accesibles en cualquier parte del c√≥digo.

Scope Local
-----------
 ‚Ä¢ Definici√≥n: Variables definidas dentro de funciones, accesibles solo dentro de esas funciones.
 ‚Ä¢ Uso: Para datos temporales utilizados √∫nicamente dentro de una funci√≥n espec√≠fica.

Esquema:
 _______________________________________
| ________	  ____________		|
||Programa|	 |Scope Global|		|
||________|      |____________|         |
|	    ___________________________ |
|          | _______	 ___________   ||
|          ||Funci√≥n|   |Scope Local|  ||
|          ||_______|   |___________|  ||
|          |                           ||
|          |                           ||
|          |                           ||
|          |___________________________||
|_______________________________________|

- Ejemplo:

 x = 10  # Variable global
 
 def mi_funcion():
     y = 5  # Variable local
     print(x, y) 
 
 mi_funcion()
 print(x)
 # print(y)  # Error: 'y' es local

Recursi√≥n
.........

¬øQu√© es una Recursi√≥n?
----------------------
 La recursi√≥n ser√≠a definir algo en t√©rminos de s√≠ mismo.

Vamos aplicar este concepto, aplicando la sucesi√≥n de fibonacci:
 0, 1, 1, 2, 3, 5, 8, 13, 21, ...

- Sintaxis:
 fib(n) = fib(n-1) + fib(n-2)

üóíNota: La sucesi√≥n inicia con 0 y 1.

Funci√≥n Recursiva
-----------------
En programaci√≥n se le llama "Funci√≥n Recursiva" cuando una funci√≥n que se llama a s√≠ misma. Los funciones recursivas tienen dos elementos principales en su estructura:
‚Ä¢ Caso Base: permite que el proceso se detenga.
‚Ä¢ Caso Recursivo: permite descomponer un problema a un versi√≥n m√°s peque√±a.

- Ejemplo:
 def fibonacci(n):
     if n == 0 or n == 1:
         return n # Caso Base
     else:
         return fibonacci(n-1) + fibonacci(n-2) # Caso Recursivo

 # n = posici√≥n en la sucesi√≥n(iniciando en 0)
 #   0, 1, 1, 2, 3, 5, 8, 13, 21, ...
 # n 0  1  2  3  4  5  6  7   8

- L√≥gica del fibonacci:
>>> def fibonacci(n):
        if n == 0 or n == 1:
                return n
        else:
                return fibonacci(n-1) + fibonacci(n-2)

>>> fibonacci(2)
1
>>> fibonacci(3)
2

Archivos
........
 Para trabajar con un archivo en Python se usa la sentencia 'with'.
Sentencia 'with'
----------------
 Un sentencia with nos permite abrir un archivo y luego cerrarlo autom√°ticamente.

- Sintaxis:
 with open("<nombre_archivo>.txt", "r") as archivo:
     # Trabajar con el archivo

- Ejemplo:
 with open("frases_famosas.txt") as archivo: # Sino se pone un segundo par√°metro, ser√° "r" por defecto.
     for linea in archivo:
         print("==== Frase ====")
         print(linea)

Modos de Apertura de Archivos:
‚Ä¢ r(read - leer)
‚Ä¢ w(write - escribir)
‚Ä¢ a(append - a√±adir)
‚Ä¢ Agregar un + incluye leer. Por ejemplo, w+ es leer y escribir.

Modificar Archivos
------------------
 Existen dos formas:
1. Reemplazar Contenido
2. A√±adir Contenido

1.

- Sintaxis:
 with open("<nombre_archivo>.txt", "w") as archivo:
     # Trabajar con el archivo

# archivo.write(<contenido>)

- Ejemplo:
1  notas = {
2      "Nora": 87,
3      "Gino": 100,
4      "Loretto": 67,
5      "Talina": 45
6  }
7  
8  with open("data_estudiantes.txt", "w") as archivo:
9      for nombre, nota in notas.items():
10         archivo.write(nombre + " - " + str(nota) + "\n")
11

- Resultado en el archivo data_estudiantes.txt:
  Nora - 87
  Gino - 100
  Loretto - 67
  Talina - 45

2. 

- Sintaxis:
 with open("<nombre_archivo>.txt", "a") as archivo:
     # Trabajar con el archivo

- Ejemplo:
1  nuevas_notas = {
2       "Emily": 54,
3       "Daniel": 98,
4       "Julienne": 78
5  }
6  
7  with open("data_estudiantes.txt", "a") as archivo:
8      for nombre, nota in nuevas_notas.items():
9          archivo.write(nombre + " - " + str(nota) + "\n")
10

- Resultado en el archivo data_estudiantes.txt:
  Nora - 87
  Gino - 100
  Loretto - 67
  Talina - 45
  Emily - 54
  Daniel - 98
  Julienne - 78

Importaciones
.............
 Las importaciones en Python se dividen en m√≥dulos.

¬øQu√© es un M√≥dulo?
------------------
 Un m√≥dulo en Python es un archivo que contiene definiciones (como funciones, clases y variables) y sentencias ejecutables. Los m√≥dulos se utilizan para organizar y reutilizar c√≥digo relacionado, facilitando la gesti√≥n y la estructura del programa.

¬øQu√© es el Proceso de Importanci√≥n?
-----------------------------------
 Un proceso de importaci√≥n es una sentencia que da acceso a las funciones y constantes definidas en el m√≥dulo importado.

- Sintaxis:
 import <m√≥dulo>

- Llamada a una funci√≥n:
 <m√≥dulo>.<funci√≥n>(<args>)

- Ejemplo:
>>> import math
>>> math.pow(9, 2)
81.0

- Llamada a una constante:
 <m√≥dulo>.<constante>

- Ejemplo:
>>> import math
>>> math.pi
3.141592653589793

- Sintaxis Alternativa:
 import <m√≥dulo> as <nombre_alternativo>
 
- Llamada a una funci√≥n y una constante:
 <nombre_alternativo>.<funci√≥n>(<args>)
 <nombre_alternativo>.<constante>

- Ejemplo:
>>> import math as matematicas
>>> matematicas.pow(9,2)
81.0
>>> matematicas.pi
3.141592653589793

- Sintaxis para Importar Elementos:
 from <m√≥dule> import <elemento>

- Ejemplo:
>>> from math import pow
>>> pow(9,2)
81.0

- Sintaxis muy usada pero que no es recomentadad‚ò£:
 from <m√≥dulo> import *

Errores y Excepciones
.....................

SyntaxError
-----------
 SyntaxError es un error en la sintaxis del programa. Ocurre cuando no se siguen las reglas formales para escribir c√≥digo en Python.

- Ejemplos:
>>> x =% 3
SyntaxError: invalid syntax

- Ejemplo en IDLE:
1  x = 5
2
3  if x > 15‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå‚ùå
4      print("Mayor que 15")
5  else:
6      print("Menor que 15")
7
8
9
10
11

-- Mensaje de Error:
   ________________
  |SyntaxError     |
  |________________|
  |‚ùåinvalid syntax|
  |                |
  |           ____ |
  |          | OK ||
  |          |____||
  |________________|

- String:
>>> "Hello'
SystaxError: EOL while scanning string literal.

- Ejemplo en IDLE:
1  def contar_numeros_pares(lista):
2          total = 0
3
4          for num in lista:  
5 ‚ùå‚ùå‚ùå‚ùå‚ùåif num % 2 == 0:
6              total += 1
7
8          return total
9
10
11

-- Mensaje de Error:
   _____________________________
  |SyntaxError                  |
  |_____________________________|
  |‚ùåexpected an indentead block|
  |                             |
  |                     ____    |
  |                    | OK |   |
  |                    |____|   |
  |_____________________________|

Excepci√≥n
---------

¬øQu√© es una Excepci√≥n?
----------------------
 Una excepci√≥n es un error detectado durante la ejecuci√≥n de un programa.

IndexError
----------
>>> "Hola, Mundo"[45]
Traceback (most recent call last):
  File "<pyshell#5>", line 1, in <module>
    "Hola, Mundo"[45]
IndexError: string index out of range

KeyError
--------
>>> puntos = {"Gino": 235, "Nora 435, "Lulu": 342}
>>> puntos["Jack"]
Traceback (most recent call last):
  File "<pyshell#10>", line 1, in <module>
    puntos["Jack"]
KeyError: 'Jack'

NameError
---------
>>> lista_colores
Traceback (most recent call last):
  File "<pyshell#3>", line 1, in <module>
    lista_colores
NameError: name 'lista_colores' is not defined

ZeroDivisionError
-----------------
>>> 5 / 0
Traceback (most recent call last):
  File "<pyshell#0>", line 1, in <module>
    5 / 0
ZeroDivisionError: division by zero

RecursionError
--------------
>>> def factorial(n):
        if n == 0 or n == 1:
                return 1
        else:
                return n * factorial(n)

>>> factorial(5)
Traceback (most recent call last):
  File "<pyshell#8>", line 1, in <module>
    factorial(5)
  File "<pyshell#7>", line 5, in factorial
    return n * factorial(n)
  File "<pyshell#7>", line 5, in factorial
    return n * factorial(n)
  File "<pyshell#7>", line 5, in factorial
    return n * factorial(n)
   [Previus line repeated 1021 more times]
   File "<pyshell#7>", line 2, in factorial
     if n == 0 or n == 1:
RecursionError: maximum recursion depth exceeded in comparison

Cl√°usulas try except
--------------------

- Sintaxis:
 try:
     # Intenta ejecutar este c√≥digo
 except:
     # Si ocurre una excepci√≥n, detente
     # inmediatamente y ejecuta √©ste c√≥digo

- Ejemplo:
1 num1 = int(input("Ingrese un n√∫mero: "))
2 num2 = int(input("Ingrese otro n√∫mero: "))
3
4 try:
5     resultado = num1 / num2
6     print(f"{num1} / {num2} =", resultado)
7 except:
8     print("Alerta, Excepci√≥n.")
9

- Resultado en try:

Ingrese un n√∫mero: 4
Ingrese otro n√∫mero: 5
4 / 5 = 0.8

- Resultado en except:

Ingrese un n√∫mero: 3
Ingrese otro n√∫mero: 0
Alerta, Excepci√≥n.

- Sintaxis para especificar el tipo de excepci√≥n:
 try:
     # Intenta ejecutar este c√≥digo
 except <tipo_de_excepci√≥n>:
     # Si ocurre una excepci√≥n de este tipo,
     # detente inmediatemente y ejecuta
     # √©ste c√≥digo

- Ejemplo:
1 num1 = int(input("Ingrese un n√∫mero: "))
2 num2 = int(input("Ingrese otro n√∫mero: "))
3
4 try:
5     resultado = num1 / num2
6     print(f"{num1} / {num2} =", resultado)
7 except ZeroDivisionError: # Tipo de Excepci√≥n
8     print("Alerta, Excepci√≥n.")
9

- Sintaxis para asignar una variable:
 try:
     # Intenta ejecutar este c√≥digo
 except <tipo_de_excepci√≥n> as <var>:
     # Si ocurre una excepci√≥n de este tipo,
     # detente inmediatemente y ejecuta
     # √©ste c√≥digo

- Ejemplo:
1 num1 = int(input("Ingrese un n√∫mero: "))
2 num2 = int(input("Ingrese otro n√∫mero: "))
3
4 try:
5     resultado = num1 / num2
6     print(f"{num1} / {num2} =", resultado)
7 except ZeroDivisionError as e: # Variable asignada
8     print(e)
9

- Resultado en except:

Ingrese un n√∫mero: 3
Ingrese otro n√∫mero: 0
division by zero

- Sintaxis con la cl√°usula else:
 try:
     # Intenta ejecutar este c√≥digo
 except <tipo_de_excepci√≥n> as <var>:
     # Si ocurre una excepci√≥n de este tipo,
     # detente inmediatemente y ejecuta
     # √©ste c√≥digo
 else:
     # Si no ocurri√≥ una excepci√≥n en 'try'
     # ejecuta este c√≥digo

- Ejemplo:
1  num1 = int(input("Ingrese un n√∫mero: "))
2  num2 = int(input("Ingrese otro n√∫mero: "))
3 
4  try:
5      resultado = num1 / num2
6      print(f"{num1} / {num2} =", resultado)
7  except ZeroDivisionError as e:
8      print(e)
9  else:
10     print("Else")
11 

- Resultado en Else:

Ingrese un n√∫mero: 4
Ingrese otro n√∫mero: 3
4 / 3 = 1.3333333333333333
Else

- Sintaxis con la cl√°usula finally:
 try:
     # Intenta ejecutar este c√≥digo
 except <tipo_de_excepci√≥n> as <var>:
     # Si ocurre una excepci√≥n de este tipo,
     # detente inmediatemente y ejecuta
     # √©ste c√≥digo
 finally:
     # Luego, ejecuta este c√≥digo

- Ejemplo:
1  num1 = int(input("Ingrese un n√∫mero: "))
2  num2 = int(input("Ingrese otro n√∫mero: "))
3 
4  try:
5      resultado = num1 / num2
6      print(f"{num1} / {num2} =", resultado)
7  except ZeroDivisionError as e:
8      print(e)
9  finally:
10     print("Finally")
11 

- Resultado en try:

Ingrese un n√∫mero: 4
Ingrese otro n√∫mero: 5
4 / 5 = 0.8
Finally

- Resultado en except:

Ingrese un n√∫mero: 3
Ingrese otro n√∫mero: 0
division by zero
Finally

- Sintaxis con la cl√°usula finally y else:
 try:
     # Intenta ejecutar este c√≥digo
 except <tipo_de_excepci√≥n> as <var>:
     # Si ocurre una excepci√≥n de este tipo,
     # detente inmediatemente y ejecuta
     # √©ste c√≥digo
 else:
     # Si no ocurri√≥ una excepci√≥n en 'try'
     # ejecuta este c√≥digo
 finally:
     # Luego, ejecuta este c√≥digo

POO(Programaci√≥n Orientada a Objetos)
.....................................

¬øQu√© es POO?
------------
 La programaci√≥n orientada a objetos (POO) en Python es un paradigma que organiza el c√≥digo en "objetos", los cuales son instancias de "clases", que define un tipo de objeto, incluyendo sus atributos (datos) y m√©todos (funciones).

Conceptos clave:
‚Ä¢ Clase: Esquema o molde para crear objetos, definiendo atributos y m√©todos.
‚Ä¢ Objeto: Instancia de una clase, con sus propios valores para los atributos.
‚Ä¢ Atributo: Variable que pertenece a un objeto o clase.
‚Ä¢ M√©todo: Funci√≥n que pertenece a un objeto o clase y que define comportamientos.

- Ejemplo:
1  class Perro:
2    def __init__(self, nombre, edad):
3        self.nombre = nombre
4        self.edad = edad
5   
6    def ladrar(self):
7        print("Guau!")
8 
9  mi_perro = Perro("Fido", 3)
10 mi_perro.ladrar()  # Output: Guau!

 En este ejemplo, Perro es una clase, mi_perro es un objeto, nombre y edad son atributos, y ladrar es un m√©todo.

- Desarrollo de una Cuenta Bancaria:
# cuenta-bancario.py
class CuentaBancaria:
    
    def __init__(self, num_cuenta, nombre_titular, balance):
        self.num_cuenta = num_cuenta
        self.nombre_titular = nombre_titular
        self.balance = balance

Funcionalidad:            ______
‚Ä¢ Retirar              __|      |__
‚Ä¢ Depositar          _| Relevantes |_
‚Ä¢ Generar Balance   |    para el     |
‚Ä¢ Actualizar Datos  |_   Sistema    _|
‚Ä¢ ...                 |__        __|
                         |______|  
Recordar:
 Self -> Instancia Actual

Esquema del proyecto(Cuenta Bancaria):
               |------->Cuenta Bancaria
	       |       $0103-231-234-232
	       |
Cuenta Bancaria|------->Cuenta Bancaria
               |       $0103-244-532-552
               |        
               |------->Cuenta Bancaria
                       $0103-654-234-242
Instancias
----------

 Cuenta Bancaria	Cuenta Bancaria
$0103-231-234-232      $0103-244-532-552

 Cuenta Bancaria	Cuenta Bancaria
$0103-231-234-232      $0103-654-234-242