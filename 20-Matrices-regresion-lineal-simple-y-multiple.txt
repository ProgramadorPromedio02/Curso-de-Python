Matrices, Regresión Lineal Simple y Regresión Lineal Múltiple
.............................................................

Regresión Lineal Simple
-----------------------
 La regresión lineal simple es una técnica utilizada para modelar la relación entre dos variables, donde una es la variable independiente (predictora)
y la otra es la variable dependiente (respuesta). La fórmula de la regresión lineal simple es:
 y=β0+β1x+ϵ
Donde:
• y es la variable dependiente.
• x es la variable independiente.
• β0 es la intersección o término constante.
• β1 es el coeficiente de regresión que representa la pendiente.
• ϵ es el término de error.

En Python, podemos utilizar la biblioteca scikit-learn para realizar regresión lineal simple. Aquí hay un ejemplo:
import numpy as np
import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression

# Datos de ejemplo
X = np.array([[1], [2], [3], [4], [5]])
y = np.array([1, 3, 2, 5, 4])

# Crear el modelo
model = LinearRegression()
model.fit(X, y)

# Realizar predicciones
y_pred = model.predict(X)

# Visualizar los resultados
plt.scatter(X, y, color='blue')
plt.plot(X, y_pred, color='red')
plt.xlabel('Variable independiente (X)')
plt.ylabel('Variable dependiente (y)')
plt.title('Regresión Lineal Simple')
plt.show()

# Parámetros del modelo
print(f'Intersección (β0): {model.intercept_}')
print(f'Pendiente (β1): {model.coef_[0]}')

Regresión Lineal Múltiple
-------------------------
La regresión lineal múltiple es una extensión de la regresión lineal simple que permite modelar la relación entre una variable dependiente y 
múltiples variables independientes. La fórmula de la regresión lineal múltiple es:
y=β0+β1x1+β2x2+⋯+βnxn+ϵ

Donde:
• y es la variable dependiente.
• x1, x2,…, xn son las variables independientes.
• β0 es la intersección o término constante.
• β1, β2,…, βn son los coeficientes de regresión.
• ϵ es el término de error.

Aquí hay un ejemplo en Python usando scikit-learn:
import numpy as np
from sklearn.linear_model import LinearRegression

# Datos de ejemplo
X = np.array([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]])
y = np.array([1, 2, 3, 4, 5])

# Crear el modelo
model = LinearRegression()
model.fit(X, y)

# Realizar predicciones
y_pred = model.predict(X)

# Parámetros del modelo
print(f'Intersección (β0): {model.intercept_}')
print(f'Coeficientes (β1, β2, ...): {model.coef_}')

Matrices
--------
 Las matrices son una estructura de datos fundamental en matemáticas y ciencias de la computación. En Python, las matrices se pueden manipular
fácilmente utilizando la biblioteca numpy.
Aquí hay un ejemplo de cómo crear y manipular matrices en Python usando numpy:
import numpy as np

# Crear una matriz
A = np.array([[1, 2], [3, 4]])

# Operaciones con matrices
B = np.array([[5, 6], [7, 8]])

# Suma de matrices
C = A + B

# Producto de matrices
D = np.dot(A, B)

# Transpuesta de una matriz
E = A.T

print('Matriz A:')
print(A)
print('Matriz B:')
print(B)
print('Suma de A y B:')
print(C)
print('Producto de A y B:')
print(D)
print('Transpuesta de A:')
print(E)
